/*
 * $Copyright (c) 2018-2023 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */
package apamax.analyticsbuilder.blocks;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.TimerParams;
using com.apama.exceptions.Exception;
using apama.analyticsbuilder.L10N;
using apama.analyticsbuilder.Promise;
using apama.analyticsbuilder.Partition_Broadcast;
using apama.analyticsbuilder.Configuration;
using apama.analyticsbuilder.ConfigurationProperty;

/**
 * Parameters
 * The parameters for the Event Input Block.
 */
event TimeTicker_$Parameters{

	/**
	 * Time period.
	 *
	 * Time between outputs in seconds.
	 */
	float periodSecs;
	
}

event TimeTicker_$State {
	float counter;
}

/**
 * Time ticker.
 *
 * Generates output periodically.
 *
 * Generates an increasing output starting from 1 and increasing by 1 every time period.
 *
 * The output is associated with the device or devices in deviceId.
 *
 * @$blockCategory Utilities
 * @$derivedName Time ticker $periodSecs
 */
event TimeTicker {

	BlockBase $base;

	/**The parameters for the block. */
	TimeTicker_$Parameters $parameters;
	
	/**
	 * Method starts listening for the events from Cumulocity 
	 * and prepares memory store. 
	 */
	action $init() {
		Partition_Broadcast broadcast := new Partition_Broadcast;
		TimerParams tp := TimerParams.recurring($parameters.periodSecs).withPartition(broadcast);
		any discard := $base.createTimerWith(tp);		
	}
	
	/**
	 * Sets output on the current activation.
	 * @param $activation The current activation.
	 * @param value value to be put on the wire.
	 */
	action $timerTriggered(Activation $activation, TimeTicker_$State $blockState) {
		$blockState.counter := $blockState.counter + 1.0;
		$setOutput_value($activation, $blockState.counter);
	}

	/**
	 * Ticker value
	 *
	 * Generates a new output every periodSecs
	 */
	action<Activation,float> $setOutput_value;

}

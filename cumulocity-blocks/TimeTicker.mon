/*
 * $Copyright (c) 2018-2023 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */
package apamax.analyticsbuilder.blocks;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.TimerParams;
using com.apama.exceptions.Exception;
using apama.analyticsbuilder.L10N;
using apama.analyticsbuilder.Promise;
using apama.analyticsbuilder.cumulocity.CumulocityInputParams;
using apama.analyticsbuilder.cumulocity.CumulocityInputHandler;
using apama.analyticsbuilder.Partition_Broadcast;
using apama.analyticsbuilder.Configuration;
using apama.analyticsbuilder.ConfigurationProperty;

/**
 * Parameters
 * The parameters for the Event Input Block.
 */
event TimeTicker_$Parameters{
	/**
	 * Device or Device Group.
	 *
	 * The device or device group from which the event has been received.
	 *
	 * The model editor uses the current device or group name. This is mapped internally to the inventory identifier.
	 * @$semanticType c8y_deviceOrGroupId
	 */
	string deviceId;
	
	/**
	 * Time period.
	 *
	 * Time between outputs in seconds.
	 */
	float periodSecs;
	
	/** Validate that values for all paramters have been provided. */
	action $validate() {
		BlockBase.throwsOnEmpty(deviceId, "deviceId", self);
	}
}

event TimeTicker_$State {
	float counter;
}

/**
 * Time ticker.
 *
 * Generates output periodically.
 *
 * Generates an increasing output starting from 1 and increasing by 1 every time period.
 *
 * The output is associated with the device or devices in deviceId.
 *
 * @$blockCategory Utilities
 * @$derivedName Time ticker $periodSecs
 */
event TimeTicker{

	BlockBase $base;

	/**The parameters for the block. */
	TimeTicker_$Parameters $parameters;
	 /** The input handler for scheduling input events. */
	CumulocityInputHandler inputHandler;
	
	action $validate(dictionary<string, any> $modelScopeParameters) returns Promise {
	
	    CumulocityInputParams params := CumulocityInputParams
        	.create($parameters.deviceId, self, "")
        	.withFields(new dictionary<string,any>);
	    
	    
	    return params.declare(inputHandlerCreated);
	}

	action inputHandlerCreated(CumulocityInputHandler inputHandler) {
	    self.inputHandler := inputHandler;
	}
	
	action returnNull(any a) returns any {
		return new any;
	}

	action throwNoDevices(string nameOrId) {
		throw L10N.getLocalizedException("blk_apama.analyticskit.blocks.cumulocity.TimeTicker_no_devices", [<any> nameOrId]);
	}

	/**
	 * Method starts listening for the events from Cumulocity 
	 * and prepares memory store. 
	 */
	action $init() {
		string id;
		for id in inputHandler.devices{
			try {
				TimerParams tp := TimerParams.recurring($parameters.periodSecs);
				if(inputHandler.isGroup) {
					tp := tp.withPartition(id);
				}
				else if(inputHandler.isBroadcast) {
					tp := tp.withPartition(Partition_Broadcast(id));
				} else {
					tp := tp.withPartition(id);
				}
				any discard := $base.createTimerWith(tp);
			} catch(Exception e) {
			}
		}
	}
	
	/**
	 * Sets output on the current activation.
	 * @param $activation The current activation.
	 * @param value value to be put on the wire.
	 */
	action $timerTriggered(Activation $activation, TimeTicker_$State $blockState) {
		log "TIMER TRIGGERED" at INFO;
		$blockState.counter := $blockState.counter + 1.0;
		$setOutput_value($activation, $blockState.counter);
	}

	/**
	 * Ticker value
	 *
	 * Generates a new output every periodSecs
	 */
	action<Activation,float> $setOutput_value;

}

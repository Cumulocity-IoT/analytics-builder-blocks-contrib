/*
 * $Copyright (c) 2018-2020 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */
package apamax.analyticskit.blocks.cumulocity;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Partition_Broadcast;

using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.exceptions.Exception;
using apama.analyticsbuilder.cumulocity.inventory.InventoryLookup;
using apama.analyticsbuilder.cumulocity.inventory.OutputHelper;
using apama.analyticsbuilder.Promise;

event CreateMeasurement_$Parameters {
	/**
	 * Device or Trigger Device.
	 *
	 * The device (or for models handling groups, Trigger Device) to which the measurement is to be sent.
	 *
	 * The model editor uses the current device name. This is mapped internally to the device identifier.
	 * @$semanticType c8y_deviceIdOrCurrentDevice
	 */
	any deviceId;

	/**
	 * Fragment Name.
	 *
	 * The name of the fragment in the measurement.
	 */
	string fragment;

	/**
	 * Series Name.
	 *
	 * The name of the series in the measurement.
	 */
	string series;

	/**
	 * Unit.
	 *
	 * The name of the unit of measurement (for example, "mm" or "lux").
	 */
	optional<string> unit;

	/** Validate parameters */
	action $validate() {
		switch(deviceId) {
			case string: { BlockBase.throwsOnEmpty(deviceId, "deviceId", self); }
			default: {
				if deviceId = any() or deviceId.getEntry("currentDevice") != <any> true {
					throw Exception("Expected a device Id or a currentDevice object", "IllegalArgumentException"); // NON-L10N-DEV
				}
			}
		}
		BlockBase.throwsOnEmpty(fragment, "fragment", self);
		BlockBase.throwsOnEmpty(series, "series", self);
	}
}

/**
 * Custom Measurement Output.
 *
 * Creates a new <tt>Measurement</tt> object for the associated device or the triggering device.
 *
 * This block sends a new measurement to Cumulocity IoT for the Value input. If the Send
 * input is connected, this block only sends an output on receiving a Send signal.  The measurement
 * is sent to the current device or the device specified.
 *
 * Non-finite values are ignored.
 *
 * @$blockCategory Output
 * @$blockType c8y_Output
 * @$derivedName $fragment Measurement
 * @$titleIsDerived true
 */
event CreateMeasurement {
	BlockBase $base;
	CreateMeasurement_$Parameters $parameters;
	/** Whether to send a new output on every (valid) value. */
	boolean createOnEveryValidValue;
	/** Sends to the 'current' device from the activation's partition: */
	boolean currentDevice;
	boolean isBroadcastDevice; // set by reflection in OutputHelper
	/** The current deviceId, if currentDevice is false */
	string deviceId;
	action $init() {
		createOnEveryValidValue :=  ($base.getInputCount("send") = 0);
	}
	action $validate() returns Promise {
		
		switch($parameters.deviceId as dev) {
			case string: {
				deviceId := dev;
			}
			default: {
				currentDevice := true;
			}
		}
		
		dictionary<string, any> fields := {"fragment":<any>$parameters.fragment, "series":$parameters.series};
		
		OutputHelper helper := OutputHelper.forBlock(self);
		helper.setSyncOutput($parameters.deviceId, Measurement.getName(), fields);
		
		return InventoryLookup.lookup($parameters.deviceId).andThen(helper.declareOutput);
	}
	
	/**
	 * Process an activation.
	 * @param $input_value The measurement to be sent.
	 * @param $input_send Signals that a new measurement is to be created. If not connected, every new Value input creates a measurement.
	 * @$inputName value Value
	 * @$inputName send Send
	 * @$inputName time Time
	 */
	action $process(Activation $activation, dictionary<string,any>$modelScopeParameters, optional<float> $input_value, boolean $input_send, optional<float> $input_time) {
		boolean validValue := false;
		if $base.getInputCount("time") = 0 {
			// just use activation's timestamp if not connected:
			$input_time := $activation.timestamp;
		}
		ifpresent $input_value, $input_time {
			validValue := $input_value.isFinite();
			if validValue and (createOnEveryValidValue or $input_send) {
				Measurement m := new Measurement;
				m.type := $parameters.fragment; // while type is required, it's mostly ignored, and typically the fragment name.
				
				m.source := deviceId;
				switch($activation.partition as part) {
					case Partition_Broadcast: {
						if not isBroadcastDevice { return; }
					}
					case string: {
						if currentDevice { m.source := part; }
					}
					default: {
						if currentDevice { return; }
					}
				}
				
				MeasurementValue mv := new MeasurementValue;
				mv.value := $input_value;
				ifpresent $parameters.unit as unit { mv.unit := unit; }
				m.measurements := {$parameters.fragment:{$parameters.series:mv}};
				m.time := $input_time;
				
				route m;
				m.params[apama.analyticsbuilder.ABConstants.MODEL_NAME_IDENTIFIER] := $modelScopeParameters.getOrDefault(apama.analyticsbuilder.ABConstants.MODEL_NAME_IDENTIFIER);
				send m to Measurement.CREATE_CHANNEL;
				$base.profile(BlockBase.PROFILE_OUTPUT);
			}
		}
	}
	
	constant string $INPUT_TYPE_send := "pulse";

}

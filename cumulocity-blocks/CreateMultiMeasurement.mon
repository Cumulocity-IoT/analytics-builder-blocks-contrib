/*
 * $Copyright (c) 2018-2024 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */

package apamax.analyticskit.blocks.cumulocity;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Partition_Broadcast;

using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.exceptions.Exception;
using apama.analyticsbuilder.cumulocity.CumulocityOutputParams;
using apama.analyticsbuilder.cumulocity.CumulocityOutputHandler;
using apama.analyticsbuilder.Promise;
using apama.analyticsbuilder.Value;

event CreateMultiMeasurement_$Parameters {
	/**
	 * Device or Trigger Device.
	 *
	 * The device (or for models handling groups, Trigger Device) to which the measurement is to be sent.
	 *
	 * The model editor uses the current device name. This is mapped internally to the device identifier.
	 * @$semanticType c8y_deviceIdOrCurrentDevice
	 */
	any deviceId;

	/**
	 * Measurement Type.
	 *
	 * The type of the measurement.
	 */
	string measurementType;

	/** Validate parameters */
	action $validate() {
		BlockBase.throwsOnEmpty(deviceId, "deviceId", self);
		BlockBase.throwsOnEmpty(measurementType, "measurementType", self);
	}
}

/**
 * Complex Measurement Output.
 *
 * Creates a new complex <tt>Measurement</tt> object for the associated device or the triggering 
 * device. A complex measurement may have multiple fragments and series.
 *
 * This block sends a new measurement to Cumulocity IoT containing multiple fragments and series. 
 * The list of fragments and series is included as properties on the Value input. The measurement
 * is sent to the current device or the device specified.
 *
 * Non-finite values are ignored.
 *
 * @$blockCategory Output
 * @$producesOutput
 * @$blockType c8y_Output
 * @$derivedName $measurementType Measurement
 * @$titleIsDerived true
 */
event CreateMultiMeasurement {
	BlockBase $base;
	CreateMultiMeasurement_$Parameters $parameters;
	/** Sends to the 'current' device from the activation's partition: */
	CumulocityOutputHandler outputHandler;
	
	action $validate() returns Promise {
		dictionary<string, any> fields := {"type":<any>$parameters.measurementType};
	    // Creating an CumulocityOutputParams object
	    CumulocityOutputParams params := CumulocityOutputParams.forSyncEventType($parameters.deviceId, 
	                                            self, Measurement.getName(), fields);
	    // Declare the output stream and provide callback action to save the output handler object.
	    // Return the Promise returned from the declare call.
	    return params.declare(handlerCreated);
	}
	/** Callback action to receive and save CumulocityOutputHandler object.
	 * @param cumulocityOutputHandler the handler object
	 */
	action handlerCreated(CumulocityOutputHandler cumulocityOutputHandler) {
	    outputHandler := cumulocityOutputHandler;
	}

	
	/**
	 * Process an activation.
	 * @param $input_value Properties containing the values to be included in the measurement. Keys are "fragment.series" and the values are either floats or objects with "value" and "unit" (optional).
	 * @$inputName value Value
	 * @$inputName time Time
	 */
	action $process(Activation $activation, dictionary<string,any>$modelScopeParameters, optional<Value> $input_value, optional<float> $input_time) {
		if $base.getInputCount("time") = 0 {
			// just use activation's timestamp if not connected:
			$input_time := $activation.timestamp;
		}
		ifpresent outputHandler.deviceToOutput($activation) as device, $input_time {
			ifpresent $input_value {
				Measurement m := new Measurement;
				m.type := $parameters.measurementType; 
				m.source := device;
				m.time := $input_time;
	
				string key;
				// Extract measurement values from properties
				// assumption is that any property name containing a 
				// single dot is a measurement value with the part
				// before the dot being the fragment and the rest the
				// series name
				for key in $input_value.properties.keys() {
					sequence<string> parts := ".".split(key);
					if(parts.size()=2) {
						string fragment := parts[0];
						string series := parts[1];
						if(not m.measurements.hasKey(fragment)) {
							m.measurements.add(fragment, new dictionary<string, MeasurementValue>);
						}
						dictionary<string, MeasurementValue> fragmentDict := m.measurements[fragment];
						MeasurementValue mv := new MeasurementValue;
						any a := $input_value.properties[key];
						switch (a as v) {
								case float:   				{ 
									mv.value := v; 
								}
								case dictionary<string,any>:   {
									if(v.hasKey("value") and v["value"].getTypeName()="float") {
										mv.value := <float>v["value"];
									}
									if(v.hasKey("unit") and v["unit"].getTypeName()="string") {
										mv.unit := <string>v["unit"];
									}
								}								
								case dictionary<any,any>:   {
									if(v.hasKey("value") and v["value"].getTypeName()="float") {
										mv.value := <float>v["value"];
									}
									if(v.hasKey("unit") and v["unit"].getTypeName()="string") {
										mv.unit := <string>v["unit"];
									}
								}
						} 
						fragmentDict.add(series,mv);
					}
				}
				outputHandler.sendOutput(m,Measurement.SEND_CHANNEL,$activation);
			}
		}
	}
	
	constant string $INPUT_TYPE_value := "pulse";
}

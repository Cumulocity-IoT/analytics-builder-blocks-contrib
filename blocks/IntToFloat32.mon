
package apamax.analyticsbuilder.custom;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;

/**
* IntToFloat32
*
* Convert 32 bits stored in an integer to the corresponding IEEE754 float.
*
* This is useful when working with Modbus as Modbus only defines integer signals but some devices 
* actually send float values. The bits from the integer will be extracted and converted into the 
* corresponding 32-Bit float according to the IEEE754 standard.
*
* The 32 bits are
*
* 00-22 fraction
*
* 23-30 exponent
*
* 31-31 sign
* 
* @$blockCategory Utilities
*/
event IntToFloat32 {

	/**
	* BlockBase object.
	*
	* This is initialized by the framework when the block is required for a model.
	*/
	BlockBase $base;

	/**
	* This action receives the input values and contains the logic of the block. 
	*
	* It performs a conversion from integer to float
	*  
	* @param $activation The current activation, contextual information required when generating a block output. Blocks should only use the
	* <tt>Activation</tt> object passed to them from the framework, never creating their own or holding on to an <tt>Activation</tt> object.
	* 
	* @param $input_value The 32 bit integer containing the IEEE754 float
	*
	* @$inputName value Integer
	*/
	action $process(Activation $activation, any $input_value) {
		integer i;
		switch ($input_value as iv)
		{
			case float: { i := iv.integralPart(); }
			case integer: { i := iv;}
			case boolean: { if iv then{ i := 1;} else { i := 0;}} 
			case string: { i := iv.toInteger(); }
		}
		$setOutput_floatOutput($activation, integerToFloat32(i));
	}

	action integerToFloat32(integer value) returns float {
		sequence<string> bits := [];
		integer i := 1 << 31;
		while(i>0) {
			if((value and i) > 0) {
				bits.append("1");
			} else {
				bits.append("0");
			}

			i := i / 2;
		}
		float sign := binaryToInteger(subsequence(bits,0,1)).toFloat();
		float e := (binaryToInteger(subsequence(bits,1,9)) - 127).toFloat();
		float fraction := calculateFraction(subsequence(bits,9,32));
		float r := (-1.0).pow(sign) * fraction * (2.0).pow(e);
		return r;
	}

	action binaryToInteger(sequence<string> input) returns integer {
		integer result := 0;
		integer i := 0;
		while(i<input.size()) {
			if(input[i]="1") {
				result := result + 2.pow(input.size()-i-1);
			}
			i := i + 1;
		}
		return result;
	}

	action subsequence(sequence<string> input, integer start, integer end) returns sequence<string> {
		sequence<string> output := [];
		integer i := start;
		while(i<end) {
			output.append(input[i]);
			i := i + 1;
		}
		return output;
	}

	action calculateFraction(sequence<string> input) returns float {
		float fraction := 1.0;
		integer i := 0;
		while(i<input.size()) {
			if(input[i]="1") {
				fraction := fraction + 2.0.pow(-1.0 * (i.toFloat() + 1.0));
			}
			i := i + 1;
		}
		return fraction;
	}
	/**
	* Float.
	*
	* Resulting float.
	*/
	action<Activation,float> $setOutput_floatOutput;	// This is initialized by the framework. It sets the output of the block and may trigger any blocks connected to this output.
}
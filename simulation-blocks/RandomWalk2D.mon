/*
 * $Copyright (c) 2020-2021 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */

/*********
 * Note: this block is now available in 10.9.0.x or later of Analytics Builder as
 * part of the product.  The below is for reference use only, we recommend using
 * the product block where applicable.
 ********/

package apamax.analyticsbuilder.custom;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.L10N;
using apama.analyticsbuilder.TimerParams;
using apama.analyticsbuilder.TimerHandle;
using apama.analyticsbuilder.Partition_Broadcast;


/** The parameters for the Random Walk 2D block. */
event RandomWalk2D_$Parameters{

	/**
	* Starting X
	* 
	* Starting X position on the 2D walk (integer). If not set, the default value is 0
	*
	* This can be a negative or positive number
	*/
	optional<integer> startingXPosition;
	/**
	* Starting Y
	* 
	* Starting Y position on the 2D walk (integer). If not set, the default value is 0
	*
	* This can be a negative or positive number
	*/
	optional<integer> startingYPosition;
}

/** State of the block.*/
event  RandomWalk2D_$State{
	boolean started;
	integer currentXPosition;
	integer currentYPosition;
	integer minXPosition;
	integer maxXPosition;
	integer minYPosition;
	integer maxYPosition;
}



/**
* Random Walk 2D
*
* Describes a path that consists of a succession of random steps.  
*
* Once the number of steps is reached, provide the min position, max position and current position of the overall walk.
*
*
* @$blockCategory Calculations
*/
event RandomWalk2D {

	/**
	* BlockBase object.
	*
	* This is initialized by the framework when the block is required for a model.
	*/
	BlockBase $base;

	/** Parameters, filled in by the framework. */
	RandomWalk2D_$Parameters $parameters;

	integer startingXPosition;
	integer startingYPosition;

	/** Called once at block start up. */
	action $init() {
		ifpresent $parameters.startingXPosition as sp
		{
			startingXPosition := sp;
		}
		else
		{
			startingXPosition := 0;
		}

		ifpresent $parameters.startingYPosition as sp
		{
			startingYPosition := sp;
		}
		else
		{
			startingYPosition := 0;
		}
	}
	/**
	* This action receives the input which is the starting position of the walk. 
	*  
	* @param $input_trigger The trigger to generate an output.
	*
	* @$inputName trigger Trigger.
	*/
	action $process(Activation $activation, boolean $input_trigger, RandomWalk2D_$State $blockState) {
		integer maxXPosition;
		integer minXPosition;
		integer maxYPosition;
		integer minYPosition;
		integer currentXPosition;
		integer currentYPosition;
		float maxRand := 1.0;
		
		if $blockState.started {
			currentXPosition := $blockState.currentXPosition;
			currentYPosition := $blockState.currentYPosition;
			minXPosition := $blockState.minXPosition;
			maxXPosition := $blockState.maxXPosition;
			minYPosition := $blockState.minYPosition;
			maxYPosition := $blockState.maxYPosition;
		} else {
			currentXPosition := startingXPosition;
			currentYPosition := startingYPosition;
			maxXPosition := startingXPosition;
			minXPosition := startingXPosition;
			maxYPosition := startingYPosition;
			minYPosition := startingYPosition;
			$blockState.started := true;
		}

		float random := maxRand.rand();
		log "MEL " + random.toString();
		if (random < 0.25) {
			currentXPosition := currentXPosition +1;
			if (currentXPosition > maxXPosition) {
				maxXPosition := currentXPosition;
			}
		} else if (random < 0.5){
			currentXPosition := currentXPosition - 1;
			if (currentXPosition < minXPosition) {
				minXPosition := currentXPosition;
			}
		} else if (random < 0.75){
			currentYPosition := currentYPosition + 1;
			if (currentYPosition > maxYPosition) {
				maxYPosition := currentYPosition;
			}
		} else {
			currentYPosition := currentYPosition - 1;
			if (currentYPosition < minYPosition) {
				minYPosition := currentYPosition;
			}
		}

		$blockState.currentXPosition := currentXPosition;
		$blockState.currentYPosition := currentYPosition;
		$blockState.minXPosition := minXPosition;
		$blockState.maxXPosition := maxXPosition;
		$blockState.minYPosition := minYPosition;
		$blockState.maxYPosition := maxYPosition;
		
		$setOutput_minXPosition($activation, minXPosition.toFloat());
		$setOutput_maxXPosition($activation, maxXPosition.toFloat());
		$setOutput_currentXPosition($activation, currentXPosition.toFloat());
		$setOutput_minYPosition($activation, minYPosition.toFloat());
		$setOutput_maxYPosition($activation, maxYPosition.toFloat());
		$setOutput_currentYPosition($activation, currentYPosition.toFloat());
	}



	/**
	* MinPosX
	*
	* Minimal X position reached during random walk
	*/
	action<Activation,float> $setOutput_minXPosition;
	/**
	* MaxPosX
	*
	* Maximal X position reached during random walk
	*/
	action<Activation,float> $setOutput_maxXPosition;
	/**
	* CurrentX
	*
	* Current X position of the random walk
	*/
	action<Activation,float> $setOutput_currentXPosition;
	/**
	* MinPosY
	*
	* Minimal Y position reached during random walk
	*/
	action<Activation,float> $setOutput_minYPosition;
	/**
	* MaxPosY
	*
	* Maximal Y position reached during random walk
	*/
	action<Activation,float> $setOutput_maxYPosition;
	/**
	* CurrentY
	*
	* Current Y position of the random walk
	*/
	action<Activation,float> $setOutput_currentYPosition;

}
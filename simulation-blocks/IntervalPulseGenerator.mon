/*
 * $Copyright (c) 2020-2023 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */
package apamax.analyticsbuilder.blocks.simulation;


using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.TimerParams;
using apama.analyticsbuilder.L10N;
using com.apama.cumulocity.ManagedObject;
using com.apama.exceptions.Exception;
using apama.analyticsbuilder.Promise;
using apama.analyticsbuilder.Partition_Broadcast;


event IntervalPulseGenerator_$Parameters {
	
	/**
	 * Interval (s).
	 *
	 * The interval in seconds in which this block should fire.
	 *
	 */
	float interval;
	
	action $validate() {
		if(interval<=0.0) {
			throw Exception("Interval should be > 0.0", "IllegalArgumentException");
		}
	}

}

	
/**
* Interval Pulse Generator.
*
* Generates a pulse in a configurable interval.
*
* @$blockCategory Utilities
*/
event IntervalPulseGenerator {
			
	BlockBase $base;
	IntervalPulseGenerator_$Parameters $parameters;
	
	action $init() {
		Partition_Broadcast broadcast := new Partition_Broadcast;
		TimerParams tp := TimerParams.recurring($parameters.interval).withPartition(broadcast);
		any _ := $base.createTimerWith(tp);
	}
	
	action $timerTriggered(Activation $activation, any $payload) {
		$setOutput_tick($activation, Value(true, $base.getModelTime(), new dictionary<string, any>));
	}

	/**
	 * Timer Tick.
	 *
	 * The generated pulse trigger.
	 */
	action<Activation,Value> $setOutput_tick;	
	
	constant string  $OUTPUT_TYPE_tick := "pulse";

	
}

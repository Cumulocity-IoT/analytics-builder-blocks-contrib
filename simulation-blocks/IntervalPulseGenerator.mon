/*
 * $Copyright (c) 2020-2021 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 */
package apamax.analyticsbuilder.blocks.simulation;


using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.TimerParams;
using apama.analyticsbuilder.L10N;
using com.apama.cumulocity.ManagedObject;
using com.apama.exceptions.Exception;
using apama.analyticsbuilder.Promise;
using apama.analyticsbuilder.cumulocity.CumulocityInputHandler;
using apama.analyticsbuilder.cumulocity.CumulocityInputParams;


event IntervalPulseGenerator_$Parameters {
	
	/**
	 * Device.
	 *
	 * The device for which a measurement is produced.
	 *
	 * The model editor uses the current device. This is mapped internally to the inventory identifier.
	 * @$semanticType c8y_deviceId
	 */
	string deviceId;

	/**
	 * Interval (s).
	 *
	 * The interval in seconds in which this block should fire.
	 *
	 */
	float interval;
	
	action $validate() {
		if(interval<=0.0) {
			throw Exception("Interval should be > 0.0", "IllegalArgumentException");
		}
	}

}

	
/**
* Interval Pulse Generator.
*
* Generates a pulse in a configurable interval.
*
* @$blockCategory Input
* @$consumesInput
* @$blockType c8y_Input
*/
event IntervalPulseGenerator {
			
	BlockBase $base;
	IntervalPulseGenerator_$Parameters $parameters;

	/** Input handler for schedule a timer @private */
	CumulocityInputHandler inputHandler;	

	action $validate(dictionary<string, any> $modelScopeParameters) returns Promise {
		
		CumulocityInputParams c8yInputParams := CumulocityInputParams.create($parameters.deviceId, self, "").withFields(new dictionary<string,any>);
		return c8yInputParams.declare(inputHandlerCreated);
	}

	action inputHandlerCreated(CumulocityInputHandler inputHandler) {
	    self.inputHandler := inputHandler;
	}
	
	action $init() {
		TimerParams tp := TimerParams.recurring($parameters.interval);
		any _ := $base.createTimerWith(tp);
	}
	
	action $timerTriggered(Activation $activation, any $payload) {
		$setOutput_pulse($activation, Value(true, $base.getModelTime(), new dictionary<string, any>));
	}

	/**
	 * Pulse.
	 *
	 * The generated pulse.
	 */
	action<Activation,Value> $setOutput_pulse;	
	
	constant string  $OUTPUT_TYPE_pulse := "pulse";

	
}
